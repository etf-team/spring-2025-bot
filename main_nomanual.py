from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaDocument
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import aiohttp
import asyncio
import datetime

from db import init_db, add_user, get_all_users
from keys import API_TOKEN, SAD_PIC_FILE_ID, HELLO_PIC_FILE_ID, TEST_FILE_PATH, HA_PIC_FILE_ID

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    waiting_for_voltage = State()
    waiting_for_contract = State()
    waiting_for_max_voltage = State()

def manual_input_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–∞–π–ª–∞", callback_data="manual_input")]
    ])

def confirm_test_file_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞!", callback_data="send_test_file")]
    ])

def voltage_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í–ù", callback_data="BH"),
            InlineKeyboardButton(text="–°–ù1", callback_data="CH1")
        ],
        [
            InlineKeyboardButton(text="–°–ù11", callback_data="CH11"),
            InlineKeyboardButton(text="–ù–ù", callback_data="HH")
        ]
    ])


def contract_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ö—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏", callback_data="contract_false"),
            InlineKeyboardButton(text="–≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏—è", callback_data="contract_true")
        ]
    ])

@dp.message(Command("start"))
async def start(message: types.Message):
    is_new_user = await add_user(message.from_user.id, message.from_user.username or "unknown")
    greeting = (
        "–ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."
        "\n\nüìÇ –û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ñ–æ—Ä–º–∞—Ç .xlsx), –∏ –º—ã:"
        "\n‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º,"
        "\n‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏,"
        "\n‚Äî –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—É—é —Ç–∞—Ä–∏—Ñ–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
        "\n\nüì≤ –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–∞, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!"
        "\n\nüîç –ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏. –ü–æ–º–æ–∂–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –¥–æ –ø–∞—Ä—ã –º–∏–Ω—É—Ç."
    )
    sent_message = await message.answer_photo(
        HELLO_PIC_FILE_ID,
        caption=greeting,
        reply_markup=manual_input_keyboard()
    )
    if is_new_user:
        try:
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=sent_message.message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@dp.message(lambda msg: msg.document is not None)
async def handle_excel(message: types.Message, state: FSMContext):
    document = message.document

    if not document.file_name.lower().endswith(".xlsx"):
        await message.answer("–ù—É–∂–µ–Ω —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    file = await bot.download(document.file_id)
    file_data = file.read()


    await state.update_data(file_data=file_data, filename=document.file_name)

    await message.answer("–ö–∞–∫–æ–µ —É –≤–∞—Å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ?", reply_markup=voltage_keyboard())
    await state.set_state(Form.waiting_for_voltage)
    await processing_msg.delete()

@dp.callback_query(Form.waiting_for_voltage, F.data.in_(["BH", "–°–ù1", "–°–ù11", "–ù–ù"]))
async def process_voltage(callback: CallbackQuery, state: FSMContext):
    voltage = callback.data
    await state.update_data(voltage_category=voltage)

    await callback.message.edit_text("–ö–∞–∫–æ–π –¥–æ–≥–æ–≤–æ—Ä –≤—ã –∑–∞–∫–ª—é—á–∞–µ—Ç–µ?", reply_markup=contract_keyboard())
    await state.set_state(Form.waiting_for_contract)
    await callback.answer()

@dp.callback_query(Form.waiting_for_contract, F.data.in_(["contract_false", "contract_true"]))
async def process_contract(callback: CallbackQuery, state: FSMContext):
    contract_data = callback.data
    contract = True if contract_data == "contract_true" else False
    await state.update_data(contract_type=contract)
    await callback.message.edit_text("–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    await state.set_state(Form.waiting_for_max_voltage)
    await callback.answer()


@dp.message(Form.waiting_for_max_voltage)
async def process_max_voltage(message: types.Message, state: FSMContext):
    try:
        max_voltage = int(float(message.text))
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    await state.update_data(max_voltage=max_voltage)

    data = await state.get_data()
    file_data = data["file_data"]
    filename = data["filename"]
    voltage_category = data["voltage_category"]
    contract_type = data["contract_type"]

    contract_str = "true" if contract_type else "false"

    url = (
        f"https://etf-team.ru/api/clients/cases?"
        f"is_transmission_included={contract_str}&"
        f"max_power_capacity_kwt={max_voltage}&"
        f"voltage_category={voltage_category}"
    )

    processing_msg = await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")

    async with aiohttp.ClientSession() as session:
        form = aiohttp.FormData()
        form.add_field(
            name='payload',
            value=file_data,
            filename=filename,
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        headers = {"accept": "application/json"}

        async with session.post(url, data=form, headers=headers) as resp:
            text = await resp.text()
            print(resp.status)
            if resp.status == 200 or 201:
                await message.answer(f"‚úÖ –£—Å–ø–µ—Ö! –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{text}")
            elif resp.status == 500 or 400:
                await message.answer_photo(
                    SAD_PIC_FILE_ID,
                    caption=(f"–û—à–∏–±–∫–∞ {resp.status} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:\n{text}")
                )

    await processing_msg.delete()
    await state.clear()


@dp.callback_query(F.data == "manual_input")
async def manual_input_prompt(callback: CallbackQuery):
    a = ("–•–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞?")
    await callback.message.answer_photo(HA_PIC_FILE_ID, caption=a, reply_markup=confirm_test_file_keyboard())

    await callback.answer()

@dp.callback_query(F.data == "send_test_file")
async def send_test_file(callback: CallbackQuery):
    try:
        await callback.message.edit_media(
            media=InputMediaDocument(
                media=types.FSInputFile(TEST_FILE_PATH),
                caption="–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —è —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
            )
        )
    except Exception as e:
        await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await callback.answer()
        return

    await asyncio.sleep(1)
    await bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    processing_msg = await callback.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –∂–¥—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

    url = "https://etf-team.ru/api/volumes-info?return_resolved=true"
    try:
        with open(TEST_FILE_PATH, "rb") as f:
            file_data = f.read()
        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field(
                name='payload',
                value=file_data,
                filename="test_file.xlsx",
                content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )
            async with session.post(url, data=form) as response:
                if response.status == 200:
                    result = await response.text()
                    await callback.message.answer(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:\n{result}")
                else:
                    bad = (
                        f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :( \n\n–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ –∏ –º—ã –µ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º! "
                        f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑. \n–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}")
                    await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=bad)
    except Exception as e:
        await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        await processing_msg.delete()
        await callback.answer()

async def reminder():
    while True:
        now = datetime.datetime.now()
        if now.day == 15:
            user_ids = await get_all_users()
            for user_id in user_ids:
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text="–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—á–µ—Ç—á–∏–∫–∞–º."
                    )
                except Exception as e:
                    print(f"error to send message {user_id}")
        await asyncio.sleep(48 * 60 * 60)


async def main():
    await init_db()

    asyncio.create_task(reminder())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
