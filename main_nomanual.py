from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import InputMediaDocument
import aiohttp
import asyncio
import datetime

from db import init_db, add_user, get_all_users
from keys import API_TOKEN, SAD_PIC_FILE_ID, HELLO_PIC_FILE_ID, TEST_FILE_PATH, HA_PIC_FILE_ID

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def manual_input_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£ –º–µ–Ω—è –Ω–µ—Ç —Ñ–∞–π–ª–∞", callback_data="manual_input")]
    ])

def confirm_test_file_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞!", callback_data="send_test_file")]
    ])

@dp.message(Command("start"))
async def start(message: types.Message):
    is_new_user = await add_user(message.from_user.id, message.from_user.username or "unknown")
    greeting = (
        "–ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è."
        "\n\nüìÇ –û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ñ–æ—Ä–º–∞—Ç .xlsx), –∏ –º—ã:"
        "\n‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º,"
        "\n‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏,"
        "\n‚Äî –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—É—é —Ç–∞—Ä–∏—Ñ–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
        "\n\nüì≤ –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–∞, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!"
        "\n\nüîç –ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏. –ü–æ–º–æ–∂–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –¥–æ –ø–∞—Ä—ã –º–∏–Ω—É—Ç."
    )
    sent_message = await message.answer_photo(
        HELLO_PIC_FILE_ID,
        caption=greeting,
        reply_markup=manual_input_keyboard()
    )
    if is_new_user:
        try:
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=sent_message.message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@dp.message(lambda msg: msg.document is not None)
async def handle_excel(message: types.Message):
    document = message.document

    if not document.file_name.lower().endswith(".xlsx"):
        await message.answer("–ù—É–∂–µ–Ω —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    file = await bot.download(document.file_id)
    file_data = file.read()

    url = "https://etf-team.ru/api/volumes-info?return_resolved=true"

    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    async with aiohttp.ClientSession() as session:
        form = aiohttp.FormData()
        form.add_field(
            name='payload',
            value=file_data,
            filename=document.file_name,
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        try:
            async with session.post(url, data=form) as response:
                if response.status == 200:
                    result = await response.text()
                    await message.answer(f"–û—Ç–≤–µ—Ç:\n{result}")
                else:
                    bad = (f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :( \n–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ –∏ –º—ã –µ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º! "
                           f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑. \n–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}")
                    await message.answer_photo(SAD_PIC_FILE_ID, caption=bad)
        except Exception as e:
            bad = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}"
            await message.answer_photo(SAD_PIC_FILE_ID, caption=bad)
        finally:
            await processing_msg.delete()

@dp.callback_query(F.data == "manual_input")
async def manual_input_prompt(callback: CallbackQuery):
    a = ("–•–æ—á–µ—à—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞?")
    await callback.message.answer_photo(HA_PIC_FILE_ID, caption=a, reply_markup=confirm_test_file_keyboard())

    await callback.answer()

@dp.callback_query(F.data == "send_test_file")
async def send_test_file(callback: CallbackQuery):
    try:
        await callback.message.edit_media(
            media=InputMediaDocument(
                media=types.FSInputFile(TEST_FILE_PATH),
                caption="–í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —è —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
            )
        )
    except Exception as e:
        await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await callback.answer()
        return

    await asyncio.sleep(1)

    await bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    processing_msg = await callback.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –∂–¥—É –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

    url = "https://etf-team.ru/api/volumes-info?return_resolved=true"

    try:
        with open(TEST_FILE_PATH, "rb") as f:
            file_data = f.read()

        async with aiohttp.ClientSession() as session:
            form = aiohttp.FormData()
            form.add_field(
                name='payload',
                value=file_data,
                filename="test_file.xlsx",
                content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            )

            async with session.post(url, data=form) as response:
                if response.status == 200:
                    result = await response.text()
                    await callback.message.answer(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:\n{result}")
                else:
                    bad = (
                        f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :( \n\n–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ –∏ –º—ã –µ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º! "
                        f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑. \n–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}")
                    await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=bad)
    except Exception as e:
        await callback.message.answer_photo(SAD_PIC_FILE_ID, caption=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        await processing_msg.delete()
        await callback.answer()

async def reminder():
    while True:
        now = datetime.datetime.now()
        if now.day == 15:
            user_ids = await get_all_users()
            for user_id in user_ids:
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text=" –î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! \n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤. –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—á–µ—Ç—á–∏–∫–∞–º"
                    )
                except Exception as e:
                    print(f"error to send message {user_id}")
        await asyncio.sleep(48 * 60 * 60)

async def main():
    await init_db()
    await dp.start_polling(bot)
    asyncio.create_task(reminder())

if __name__ == '__main__':
    asyncio.run(main())
