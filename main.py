import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import aiohttp
from aiogram.types import FSInputFile


from db import init_db, add_user
from keys import API_TOKEN

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class ManualInputStates(StatesGroup):
    waiting_for_kwh = State()
    waiting_for_voltage = State()

print("Bot started")

def manual_input_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_input")]
    ])

def voltage_selection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–æ–µ", callback_data="voltage_high")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ", callback_data="voltage_medium")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–µ 2", callback_data="voltage_medium2")],
        [InlineKeyboardButton(text="–ù–∏–∑–∫–æ–µ", callback_data="voltage_low")],
    ])



@dp.message(Command("start"))
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username or "unknown")
    greeting = (f' –ú—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –ª–∏—Ü–∞–º –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.'
                f' \n\nüìÇ –û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ (—Ñ–æ—Ä–º–∞—Ç .xlsx), –∏ –º—ã:'
                f'\n‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–æ —á–∞—Å–∞–º,'
                f'\n‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏,'
                f'\n‚Äî –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—É—é —Ç–∞—Ä–∏—Ñ–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.'
                f'\n\nüì≤ –ò–ª–∏ –≤—ã–±–µ—Ä–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –ø–æ–¥ —Ä—É–∫–æ–π –ø–æ–∫–∞ –Ω–µ—Ç.'
                f'\n\nüîç –ù–∞—à —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ ‚Äî –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤, –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –±—é—Ä–æ–∫—Ä–∞—Ç–∏–∏. –ü–æ–º–æ–∂–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–Ω–µ–π –¥–æ –ø–∞—Ä—ã –º–∏–Ω—É—Ç.'
    )

    photo = FSInputFile("./static/hello_pic.png")
    await message.answer_photo(photo, caption=greeting, reply_markup=manual_input_keyboard())



@dp.message(lambda msg: msg.document is not None)
async def handle_excel(message: types.Message):
    document = message.document

    if not document.file_name.lower().endswith(".xlsx"):
        await message.answer("–ù—É–∂–µ–Ω —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")

    file = await bot.download(document.file_id)
    file_data = file.read()

    url = "https://etf-team.ru/api/volumes-info?return_resolved=true"

    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    async with aiohttp.ClientSession() as session:
        form = aiohttp.FormData()
        form.add_field(
            name='payload',
            value=file_data,
            filename=document.file_name,
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )

        try:
            async with session.post(url, data=form) as response:
                if response.status == 200:
                    result = await response.text()
                    await message.answer(f"–û—Ç–≤–µ—Ç:\n{result}")
                else:
                    await message.answer(f"–æ—à–∏–±–∫–∞: {response.status}")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            await processing_msg.delete()


@dp.callback_query(F.data == "manual_input")
async def manual_input(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–≤ –∫–í—Ç¬∑—á):")
    await state.set_state(ManualInputStates.waiting_for_kwh)
    await callback.answer()


@dp.message(ManualInputStates.waiting_for_kwh)
async def received_kwh(message: types.Message, state: FSMContext):
    try:
        kwh = float(message.text)
        await state.update_data(kwh=kwh)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ:", reply_markup=voltage_selection_keyboard())
        await state.set_state(ManualInputStates.waiting_for_voltage)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 150.5)")


@dp.callback_query(ManualInputStates.waiting_for_voltage)
async def voltage_selected(callback: CallbackQuery, state: FSMContext):
    voltage_map = {
        "voltage_high": 1,
        "voltage_medium": 2,
        "voltage_medium2": 3,
        "voltage_low": 4
    }

    voltage_code = callback.data
    voltage = voltage_map.get(voltage_code)

    if not voltage:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
        return

    data = await state.get_data()
    kwh = data.get("kwh")

    payload = {
        "kwh": kwh,
        "voltage": voltage
    }
    print(payload)

    url = "https://etf-team.ru/api/volumes-info?return_resolved=true"

    await bot.send_chat_action(chat_id=callback.message.chat.id, action="typing")
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    result = await response.text()
                    await callback.message.edit_text(f"–û—Ç–≤–µ—Ç:\n{result}")
                else:
                    bad = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! :( \n–ù–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—à–∏–±–∫–µ –∏ –º—ã –µ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏–º! \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑. \n–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status}"
                    photo = FSInputFile("./static/sad.png")
                    await callback.message.answer_photo(photo, caption=bad)

        except Exception as e:
            await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        finally:
            await state.clear()
            await callback.answer()



async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
